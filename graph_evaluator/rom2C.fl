letrec parse_arg [] = []
 /\    parse_arg ("-g":args) = ("GUI","1"):(parse_arg args)
 /\    parse_arg ("-v":args) = ("VERBOSE","1"):(parse_arg args)
 /\    parse_arg ("-m":cnt:args) =
	("MAX_REDUCTIONS",cnt):(parse_arg args)
 /\    parse_arg ("-s":cnt:args) =
	("START_TRACING_FROM",cnt):(parse_arg args)
 /\    parse_arg [file] = [("ROM_FILE", file)]
 /\    parse_arg other = eprintf "Unknown options %S\n" other
;

let opts = parse_arg ARGS;

let rom_file = assoc "ROM_FILE" opts;
let max_reductions =
	(sscanf "%d" (assoc "MAX_REDUCTIONS" opts)) catch 100000
;
let start_tracing_from =
	(sscanf "%d" (assoc "START_TRACING_FROM" opts)) catch 0
;
let verbose = ((assoc "VERBOSE" opts) = "1") catch F;
let gui_mode = ((assoc "GUI" opts) = "1") catch F;


let TDIR = mktempd "EVAL";
TDIR fseq ();

let C_file = sprintf "%s/my_eval.c" TDIR;
let executable = sprintf "%s/my_eval" TDIR;

cload (DIR^"../types.fl");
cload (DIR^"/visualize.fl");

clet Pnode {i::int} =
    let nd = {''i :: node} in
    let C n = wexpr2bool [] (hw_destr n) in
    let tp = C (nd-->ntype) in
      tp = (C G_FREE) =>
        let l = nd-->left in
        sprintf "G_FREE %s" (P_addr l)
    |
      tp = (C G_APP) =>
        let l = nd-->left in
        let r = nd-->right in
        sprintf "G_APP %s %s" (P_addr l) (P_addr r)
    | tp = (C G_COMB) =>
        let Cc n = wexpr2bool [] (hw_destr n) in
        let c = Cc (nd-->comb) in
	let res =
	    c == (Cc C_S) => "C_S" |
	    c == (Cc C_K) => "C_K" |
	    c == (Cc C_I) => "C_I" |
	    c == (Cc C_Y) => "C_Y" |
	    c == (Cc C_SPRIME) => "C_SPRIME" |
	    c == (Cc C_SPRIMEPRIME) => "C_SPRIMEPRIME" |
	    c == (Cc C_C) => "C_C" |
	    c == (Cc C_CPRIME) => "C_CPRIME" |
	    c == (Cc C_B) => "C_B" |
	    c == (Cc C_BSTAR) => "C_BSTAR" |
	    c == (Cc C_BPRIME) => "C_BPRIME" |
	    c == (Cc C_S1) => "C_S1" |
	    c == (Cc C_S2) => "C_S2" |
	    c == (Cc C_L) =>
		    let i = wexpr2bool [] (hw_destr (nd-->comb_idx)) in
		    sprintf "L%d" (bv2int (list2bv i))
	    |
	    c == (Cc C_Cn) =>
		    let i = wexpr2bool [] (hw_destr (nd-->comb_idx)) in
		    sprintf "Cn%d" (bv2int (list2bv i))
	    |
	    eprintf "Illegal combinator node (%s)" (P_combinator (nd-->comb))
	in
	sprintf "%s" res
    | tp = (C G_PRIM) =>
        let Cp n = wexpr2bool [] (hw_destr n) in
        let p = Cp (nd-->prim) in
	let res = 
	    p = (Cp P_PLUS) => "P_PLUS" |
	    p = (Cp P_MINUS) => "P_MINUS" |
	    p = (Cp P_TIMES) => "P_TIMES" |
	    p = (Cp P_DIV) => "P_DIV" |
	    p = (Cp P_MOD) => "P_MOD" |
	    p = (Cp P_EQ) => "P_EQ" |
	    p = (Cp P_NEQ) => "P_NEQ" |
	    p = (Cp P_GT) => "P_GT" |
	    p = (Cp P_GEQ) => "P_GEQ" |
	    p = (Cp P_AND) => "P_AND" |
	    p = (Cp P_OR) => "P_OR" |
	    p = (Cp P_NOT) => "P_NOT" |
	    p = (Cp P_COND) => "P_COND" |
	    p = (Cp P_FST) => "P_FST" |
	    p = (Cp P_SND) => "P_SND" |
	    p = (Cp P_TUPLE) => "P_TUPLE" |
	    p = (Cp P_HD) => "P_HD" |
	    p = (Cp P_TL) => "P_TL" |
	    p = (Cp P_IS_NIL) => "P_IS_NIL" |
	    p = (Cp P_CONS) => "P_CONS" |
	    p = (Cp P_NIL) => "P_NIL" |
	    p = (Cp P_PROC_INIT) => "P_PROC_INIT" |
	    eprintf "Illegal primitive function node (%s)"
		    (P_primitive (nd-->prim))
	in
	sprintf "%s" res
    | tp = (C G_INDIR) =>
        let l = nd-->left in
        sprintf "G_INDIR %s" (P_addr l)
    | tp = (C G_INT) =>
        let i = nd-->int in
        sprintf "Int %s" (P_Int i)
    | tp = (C G_AINT) =>
        let i = nd-->aint in
        let l = nd-->left in
        sprintf "Aint %s %s" (P_Aint i) (P_addr l)
    | tp = (C G_CONS) =>
        let l = nd-->left in
        let r = nd-->right in
        sprintf "CONS %s %s" (P_addr l) (P_addr r)
    | tp = (C G_NIL) =>
        sprintf "NIL"
    | eprintf "Illegal node type (%s)" (P_g_type (nd-->ntype))
;

let dbg_cnt = ref 0;

let gen_node fp {i::int} =
    (fprintf fp "    np = get_node(\"init\"); // Location %d: %s\n" (deref dbg_cnt) (Pnode i)) fseq
    (dbg_cnt := (deref dbg_cnt + 1)) fseq
    let nd = {''i :: node} in
    let C n = wexpr2bool [] (hw_destr n) in
    let E_addr a = sprintf "&(heap[%d])" (sscanf "0x%x" (P_addr a)) in
    let tp = C (nd-->ntype) in
      tp = (C G_FREE) =>
        let l = nd-->left in
	(fprintf fp "    np->ntype = G_FREE;\n") fseq
	(fprintf fp "    np->left = %s;\n" (E_addr l))
    |
      tp = (C G_APP) =>
        let l = nd-->left in
        let r = nd-->right in
	(fprintf fp "    np->ntype = G_APP;\n") fseq
	(fprintf fp "    np->left = %s;\n" (E_addr l)) fseq
	(fprintf fp "    np->right = %s;\n" (E_addr r))
    | tp = (C G_COMB) =>
        let Cc n = wexpr2bool [] (hw_destr n) in
        let c = Cc (nd-->comb) in
	let res =
	    c == (Cc C_S) => "C_S" |
	    c == (Cc C_K) => "C_K" |
	    c == (Cc C_I) => "C_I" |
	    c == (Cc C_Y) => "C_Y" |
	    c == (Cc C_SPRIME) => "C_SPRIME" |
	    c == (Cc C_SPRIMEPRIME) => "C_SPRIMEPRIME" |
	    c == (Cc C_C) => "C_C" |
	    c == (Cc C_CPRIME) => "C_CPRIME" |
	    c == (Cc C_B) => "C_B" |
	    c == (Cc C_BSTAR) => "C_BSTAR" |
	    c == (Cc C_BPRIME) => "C_BPRIME" |
	    c == (Cc C_S1) => "C_S1" |
	    c == (Cc C_S2) => "C_S2" |
	    c == (Cc C_L) => "C_L" |
	    c == (Cc C_Cn) => "C_Cn" |
	    eprintf "Illegal combinator node (%s)" (P_combinator (nd-->comb))
	in
	(fprintf fp "    np->ntype = G_COMB;\n") fseq
	(fprintf fp "    np->comb = %s;\n" res) fseq
	(c != (Cc C_L)) AND (c != (Cc C_Cn)) => () |
	let i = wexpr2bool [] (hw_destr (nd-->comb_idx)) in
	fprintf fp "    np->comb_idx = %d;" (bv2int (list2bv i))
    | tp = (C G_PRIM) =>
        let Cp n = wexpr2bool [] (hw_destr n) in
        let p = Cp (nd-->prim) in
	let res = 
	    p = (Cp P_PLUS) => "P_PLUS" |
	    p = (Cp P_MINUS) => "P_MINUS" |
	    p = (Cp P_TIMES) => "P_TIMES" |
	    p = (Cp P_DIV) => "P_DIV" |
	    p = (Cp P_MOD) => "P_MOD" |
	    p = (Cp P_EQ) => "P_EQ" |
	    p = (Cp P_NEQ) => "P_NEQ" |
	    p = (Cp P_GT) => "P_GT" |
	    p = (Cp P_GEQ) => "P_GEQ" |
	    p = (Cp P_AND) => "P_AND" |
	    p = (Cp P_OR) => "P_OR" |
	    p = (Cp P_NOT) => "P_NOT" |
	    p = (Cp P_COND) => "P_COND" |
	    p = (Cp P_FST) => "P_FST" |
	    p = (Cp P_SND) => "P_SND" |
	    p = (Cp P_TUPLE) => "P_TUPLE" |
	    p = (Cp P_HD) => "P_HD" |
	    p = (Cp P_TL) => "P_TL" |
	    p = (Cp P_IS_NIL) => "P_IS_NIL" |
	    p = (Cp P_CONS) => "P_CONS" |
	    p = (Cp P_NIL) => "P_NIL" |
	    p = (Cp P_PROC_INIT) => "P_PROC_INIT" |
	    eprintf "Illegal primitive function node (%s)"
		    (P_primitive (nd-->prim))
	in
	(fprintf fp "    np->ntype = G_PRIM;\n") fseq
	(fprintf fp "    np->prim = %s;\n" res)
    | tp = (C G_INDIR) =>
        let l = nd-->left in
	(fprintf fp "    np->ntype = G_INDIR;\n") fseq
	(fprintf fp "    np->left = %s;\n" (E_addr l))
    | tp = (C G_INT) =>
        let i = nd-->int in
	let i = bv2int (list2bv (wexpr2bool [] (hw_destr (nd-->int)))) in
	(fprintf fp "    np->ntype = G_INT;\n") fseq
	(fprintf fp "    np->mint = %d;\n" i)
    | tp = (C G_AINT) =>
	(eprintf "G_AINT not supported yet (%s)\n" (Pnode i))
    | tp = (C G_CONS) =>
        let l = nd-->left in
        let r = nd-->right in
	(fprintf fp "    np->ntype = G_CONS;\n") fseq
	(fprintf fp "    np->left = %s;\n" (E_addr l)) fseq
	(fprintf fp "    np->right = %s;\n" (E_addr r))
    | tp = (C G_NIL) =>
	(fprintf fp "    np->ntype = G_NIL;\n")
    | eprintf "Illegal node type (%s)" (P_g_type (nd-->ntype))
;
non_lazy gen_node;

let mk_C rom_file C_file =
    let rfp = fopen rom_file "r" then
    (system (sprintf "/bin/cp %s %s" (DIR^"reduction.c") C_file)) fseq
    let cfp = fopen C_file "a" then
    (
	let info = fgets rfp then
	let top_levels = (sscanf "%b" info)/(2**(get_hw_type_size "addr")) then
	(fprintf cfp "static void\ninitialize() {\n") fseq
	(fprintf cfp "    node_ptr np;\n\n") fseq
	(fprintf cfp "    top_level_funs = %d;\n\n" top_levels) fseq
        letrec rd {addr::int} =
            let line = fgets rfp then
            line == "" => [] |
            let v = sscanf "%b" line in
	    (gen_node cfp v) fseq (rd (addr+1))
        in
        (rev (rd 0)) fseq
	(fprintf cfp "}\n") fseq
        (fclose rfp) fseq
        (fclose cfp) fseq
	(system (sprintf "gcc -g -o %s %s /home/cseger/VossII/src/lib/fl_lib.a" executable C_file))
    ) gen_catch (\msg. (fclose rfp) fseq (fclose cfp) fseq error msg)
;

let status = mk_C rom_file C_file;
status != 0 => eprintf "Compilation failed with status %d\n" status | ();

let run_cmd =
    sprintf "%s -m %d -s %d -I %s%s%s"
	    executable
	    max_reductions
	    start_tracing_from
	    TDIR
	    (gui_mode => " -g" | "")
	    (verbose => " v" | "")
;

fprintf stderr "Run: %s\n" run_cmd;

(system run_cmd) != 0 => eprintf "'%s' failed\n" run_cmd | ();


NOT gui_mode => (exit 0) | ();

load (TDIR^"/eval_vis.fl");

