// Make sure fl is invoked with -C (or --cephalopode) flag.
(get_combinator_expression "hd" fseq ())
catch error "Need to run fl with -C flag!";

// Get the Cephalopode type declarations needed for the ROM (node).
cload (DIR^"../types.fl");

// Use tcl//tk to draw the tree for the term e.
let draw_terms defs =
    let tmp_dir = mktempd "draw_term" then
    let dot_file = sprintf "%s/graph.dot" tmp_dir then
    let fp = fopen dot_file "w" then
    (fprintf fp "digraph G {\n") fseq
    (fprintf fp "node [shape=circle];\n") fseq
    (fprintf fp "size = \"8.5,11.0\";\n") fseq
    (fprintf fp "center = 1;\n") fseq
    (fprintf fp "margin = 0.5;\n") fseq
    (fprintf fp "ordering=out;\n") fseq
    let pr1 (uid,e) =
	fprintf fp "f%d [shape=box,style=filled,label=\"UD%d\"];\n" uid uid
    in
    (foreach pr1 defs) fseq
    (fprintf fp "{rank=same") fseq
    (foreach (\(uid,e). fprintf fp " f%d" uid) defs) fseq
    (fprintf fp "}\n") fseq
    //
    let rcnt = ref 0 then
    let dr (uid,e) =
	let to = base_draw_term fp rcnt e then
	fprintf fp "f%d -> n%d [color=black];\n" uid to
    in
    (foreach dr defs) fseq
    (fprintf fp "\n}\n") fseq
    (fclose fp) fseq
    let w = tcl_eval [sprintf "display_dot %s {} {}" dot_file] then
    (system (sprintf "/bin/rm -f %s" dot_file)) fseq
    ()
;


letrec term_substitute sub (APPLY E1 E2) =
    APPLY (term_substitute sub E1) (term_substitute sub E2)
 /\    term_substitute sub (CONS E1 E2) =
    CONS (term_substitute sub E1) (term_substitute sub E2)
 /\    term_substitute sub (LAMBDA v E) =
    let sub' = filter (\p. fst p != v) sub in
    LAMBDA v (term_substitute sub' E)
 /\    term_substitute sub (VAR v) =
    (assoc v sub) catch (VAR v)
 /\    term_substitute sub other = other
;

cletrec free (APPLY E1 E2) = (free E1) union (free E2)
 /\     free (LAMBDA v E) = (free E) subtract [v]
 /\     free (VAR v) = [v]
 /\     free (CONS E1 E2) = (free E1) union (free E2)
 /\     free other = []
;

let clean_term E =
    letrec clean (APPLY (LAMBDA v1 E1) (VAR v2)) =
			term_substitute [(v1, VAR v2)] (clean E1)
     /\    clean (APPLY E1 E2) = APPLY (clean E1) (clean E2)
     /\    clean (LAMBDA v E) = (LAMBDA v (clean E))
     /\    clean (CONS E1 E2) = CONS (clean E1) (clean E2)
     /\    clean other = other
    in
    (clean E)
;


lettype cterm = cAPPLY cterm cterm
	      | cLAMBDA string cterm
	      | cCONS cterm cterm
	      | cVAR string
	      | cPRIM string
	      | cCOMB string
	      | cUSERDEF int
	      | cINT int
	      | cNIL
;

// Use tcl//tk to draw the tree for the term e.
let draw_cterms defs =
    let tmp_dir = mktempd "draw_term" then
    let dot_file = sprintf "%s/graph.dot" tmp_dir then
    let fp = fopen dot_file "w" then
    (fprintf fp "digraph G {\n") fseq
    (fprintf fp "node [shape=circle];\n") fseq
    (fprintf fp "size = \"8.5,11.0\";\n") fseq
    (fprintf fp "center = 1;\n") fseq
    (fprintf fp "margin = 0.5;\n") fseq
    (fprintf fp "ordering=out;\n") fseq
    let pr1 (uid,e) =
	fprintf fp "f%d [shape=box,style=filled,label=\"UD%d\"];\n" uid uid
    in
    (foreach pr1 defs) fseq
    (fprintf fp "{rank=same") fseq
    (foreach (\(uid,e). fprintf fp " f%d" uid) defs) fseq
    (fprintf fp "}\n") fseq
    //
    let rcnt = ref 0 then
    letrec draw (cAPPLY E1 E2) =
        let n = deref rcnt then
        (rcnt := (n+1)) fseq
        let l = draw E1 then
        let r = draw E2 then
        (fprintf fp "n%d [label = \"@\"];\n" n) fseq
        (fprintf fp "n%d -> n%d [style=solid, color=red];\n" n l) fseq
        (fprintf fp "n%d -> n%d [style=solid, color=black];\n" n r) fseq
        n
     /\    draw (cCONS E1 E2) =
        let n = deref rcnt then
        (rcnt := (n+1)) fseq
        let l = draw E1 then
        let r = draw E2 then
        (fprintf fp "n%d [label = \":\"];\n" n) fseq
        (fprintf fp "n%d -> n%d [style=solid, color=red];\n" n l) fseq
        (fprintf fp "n%d -> n%d [style=solid, color=black];\n" n r) fseq
        n
     /\    draw (cLAMBDA v E) =
        let n = deref rcnt then
        (rcnt := (n+1)) fseq
        let l = draw (cVAR v) then
        let r = draw E then
        (fprintf fp "n%d [label = \"L\"];\n" n) fseq
        (fprintf fp "n%d -> n%d [style=solid, color=red];\n" n l) fseq
        (fprintf fp "n%d -> n%d [style=solid, color=black];\n" n r) fseq
        n
     /\    draw (cVAR v) =
        let n = deref rcnt then
        (rcnt := (n+1)) fseq
        (fprintf fp "n%d [shape=plaintext, label = \"%s\"];\n" n v) fseq
        n
     /\    draw (cPRIM s) =
        let n = deref rcnt then
        (rcnt := (n+1)) fseq
        (fprintf fp "n%d [shape=plaintext, label = \"%s\"];\n" n s) fseq
        n
     /\    draw (cCOMB s) =
        let n = deref rcnt then
        (rcnt := (n+1)) fseq
        (fprintf fp "n%d [shape=plaintext, label = \"%s\"];\n" n s) fseq
        n
     /\    draw (cINT i) =
        let n = deref rcnt then
        (rcnt := (n+1)) fseq
        (fprintf fp "n%d [shape=plaintext, label = \"%d\"];\n" n i) fseq
        n
     /\    draw (cUSERDEF i) =
        let n = deref rcnt then
        (rcnt := (n+1)) fseq
        (fprintf fp "n%d [shape=plaintext, label = \"UD-%d\"];\n" n i) fseq
        n
     /\    draw cNIL =
        let n = deref rcnt then
        (rcnt := (n+1)) fseq
        (fprintf fp "n%d [label = \"[]\"];\n" n) fseq
        n
    in
    let dr (uid,e) =
	let to = draw e then
	fprintf fp "f%d -> n%d [color=black];\n" uid to
    in
    (foreach dr defs) fseq
    (fprintf fp "\n}\n") fseq
    (fclose fp) fseq
    let w = tcl_eval [sprintf "display_dot %s {} {}" dot_file] then
    (system (sprintf "/bin/rm -f %s" dot_file)) fseq
    ()
;


let user_def_tbl = 
    let get_primfn name = LEAF (PRIM_FN (name2primfn name)) in
    let get_userdef name = LEAF (USERDEF (get_userdef_id name)) in
    [
	(get_primfn "P_TUPLE", cPRIM "P_TUPLE", [], "TUPLE"),
	(get_userdef "fst", cPRIM "P_FST", [T], "FST"),
	(get_userdef "snd", cPRIM "P_SND", [T], "FST"),
	(get_primfn "P_COND", cPRIM "P_COND", [T,F,F], "ITE"),
	(get_userdef "=", cPRIM "P_EQ", [T,T], "="),
	(get_userdef "!=", cPRIM "P_NEQ", [T,T], "!="),
	(get_userdef "i_ge", cPRIM "P_GEQ", [T,T], ">="),
	(get_userdef "i_gt", cPRIM "P_GT", [T,T], ">"),
	(get_userdef "AND", cPRIM "P_AND", [T,T], "&"),
	(get_userdef "OR", cPRIM "P_OR", [T,T], "|"),
	(get_userdef "NOT", cPRIM "P_NOT", [T], "!"),
	(get_userdef "i_minus", cPRIM "P_MINUS", [T,T], "-"),
	(get_userdef "i_plus",  cPRIM "P_PLUS", [T,T], "+"),
	(get_userdef "i_mul",  cPRIM "P_TIMES", [T,T], "*"),
	(get_userdef "hd",  cPRIM "P_HD", [T], "HD"),
	(get_userdef "tl",  cPRIM "P_TL", [T], "TL"),
	(get_primfn "P_TAIL", cPRIM "P_TL", [T], "TL"),
	(get_primfn "P_HEAD", cPRIM "P_HD", [T], "HD"),
	(get_userdef ":",  cPRIM "P_CONS", [F,F], "CONS"),
	(get_primfn "P_CONS", cPRIM "P_CONS", [F,F], "CONS")
    ]
;

//user_def_tbl;

clet is_ceph_primitive uid =
    let idx = find_first0 (\t. fst t = uid) user_def_tbl then
    idx != 0
;

let ceph_primitive_name uid =
    let idx = find_first0 (\t. fst t = uid) user_def_tbl then
    val (_,_,_,name) = el idx user_def_tbl then
    name
;

clet primtive_strictness uid =
    let idx = find_first0 (\t. fst t = uid) user_def_tbl then
    val (_,_,strictness,_) = el idx user_def_tbl then
    strictness
;

let userdef2ceph uid =
    let idx = find_first0 (\t. fst t = uid) user_def_tbl then
    val (_,ceph,_,_) = el idx user_def_tbl then
    ceph
;

let is_userdef (LEAF (USERDEF i)) = T
 /\ is_userdef other = F
;

let get_uid (LEAF (USERDEF i)) = i;

let clean_name s =
    (assoc s [("P_S", "S"), ("P_K", "K"), ("P_I", "I"), ("P_C", "C"),
	      ("P_B", "B"), ("P_Y", "Y"), ("P_SPRIME", "S'"),
	      ("P_CPRIME", "C'"), ("P_BSTAR", "B*"), ("P_BPRIME", "B'")])
    catch
    (string_tl (string_tl s))
; 


letrec term2cterm (APPLY E1 E2) = cAPPLY (term2cterm E1) (term2cterm E2)
 /\    term2cterm (LAMBDA v E) = cLAMBDA v (term2cterm E)
 /\    term2cterm (CONS E1 E2) = cCONS (term2cterm E1) (term2cterm E2)
 /\    term2cterm (VAR v) = cVAR v
 /\    term2cterm (NIL) = cNIL
 /\    term2cterm (LEAF (INT i)) = cINT i
 /\    term2cterm (LEAF (PRIM_FN i)) = 
	    i < 0 => cCOMB (sprintf "L%d" (-1*i-1000)) |
	    let nm = primfn2name i in
	    mem nm ["P_S", "P_K", "P_I", "P_C", "P_B", "P_Y", "P_SPRIME",
		    "P_CPRIME", "P_BSTAR", "P_BPRIME"] =>
		cCOMB (clean_name nm)
	    |	
		cPRIM (clean_name nm)
 /\    term2cterm ud assuming (is_userdef ud) = 
	    (is_ceph_primitive ud) => userdef2ceph ud |
	    val (LEAF (USERDEF i)) = ud in
	    cUSERDEF i
;

let basic_pre_process expr_name =
    let u_idx = get_userdef_id expr_name then
    let cexprs = ref [] then
    let is_defined uid = (find_first0 (\t. fst t = uid) (deref cexprs)) != 0 in
    letrec process uid =
	is_defined uid => () |
	(cexprs := ((uid,ref NONE):(deref cexprs))) fseq
	let E = snd (get_userdef_expression uid) then
	let E' = clean_term E then
	letrec do (APPLY E1 E2) = APPLY (do E1) (do E2)
	 /\    do (CONS E1 E2)  = CONS (do E1) (do E2)
	 /\    do (LAMBDA v E)  = LAMBDA v (do E)
	 /\    do E assuming (is_ceph_primitive E) = E
	 /\    do E assuming (is_userdef E) =
		val (LEAF (USERDEF id)) = E in
		((process id) fseq E)
	 /\    do other = other
	in
	let res = do E' then
	let idx = find_first (\t. fst t = uid) (deref cexprs) then
	let rc = snd (el idx (deref cexprs)) then
	rc := (SOME res)
    in
    (process u_idx) fseq
    map (\p. fst p, get_value (deref (snd p))) (deref cexprs)
;

let get_strictness strictness_db E =
    letrec get_args cur (LAMBDA v1 E) = get_args (v1:cur) E
     /\    get_args cur other = cur,other
    in
    val (args, body) = get_args [] E then
    //
    letrec is_strict v args (APPLY E1 E2) = is_strict v (E2:args) E1
     /\    is_strict v args (CONS E1 E2) = F
     /\    is_strict v args E assuming (is_ceph_primitive E) =
	let strictness = primtive_strictness E then
	length strictness > length args => F |
	letrec check (st:sts) (arg:args) =
	    (st => (is_strict v [] arg) | F) OR (check sts args)
	 /\    check [] _ = F
	in
	check strictness args
     /\    is_strict v args (LEAF (USERDEF uid)) =
	let idx = find_first0 (\p. fst p = uid) strictness_db then
	idx = 0 => F |
	val (_, _, strictness) = el idx strictness_db then
	length strictness > length args => F |
	letrec check (st:sts) (arg:args) =
	    (st => (is_strict v [] arg) | F) OR (check sts args)
	 /\    check [] _ = F
	in
	check strictness args
     /\   is_strict v args (VAR v2) = (v = v2)
     /\   is_strict v args other = F
    in
    map (\v. is_strict v [] body) (rev args)
;

let pre_process expr_name =
    let base = basic_pre_process expr_name then
    letrec do db ((uid,t):rem) =
	let strictness = get_strictness db t then
	let db' = (uid, t, strictness):db then
	do db' rem
     /\   do db [] = db
    in
    do [] base
;

let S1 = LEAF (PRIM_FN (-1001));

let is_VAR (VAR s) = T
 /\ is_VAR other = F
;

let is_forced (LEAF (INT i)) = T
 /\ is_forced (CONS E1 E2) = T
 /\ is_forced (NIL) = T
 /\ is_forced other = F
;

let rearrange strictness_db E =
    letrec process args (APPLY E1 E2) = process (E2:args) E1
     /\   process args (CONS E1 E2) = CONS (process [] E1) (process [] E2)
     /\    process args (LAMBDA v E) =
	let cur = LAMBDA v (process [] E) in
	letrec build1 (arg:args) cur =
	    let arg' = process [] arg in
	    build1 args (APPLY cur arg')
	 /\    build1 [] cur = cur
	in
	build1 args cur
     /\   process args  fn assuming (is_ceph_primitive fn) =
	let strictness = primtive_strictness fn then
	letrec build2 (st:sts) (arg:args) cur =
	    (NOT st) OR (is_forced arg) =>
		let arg' = process [] arg in
		build2 sts args (APPLY cur arg')
	    |
	    let arg' = process [] arg in
	    build2 sts args (APPLY arg' cur)
	 /\    build2 [] (arg:args) cur =
	    let arg' = process [] arg in
	    build2 [] args (APPLY cur arg')
	 /\    build2 [] [] cur = cur
	 /\    build2 strs [] cur =
		eprintf "|strictness| > |args| for %s" (DBGterm fn)
	in
	build2 strictness args fn
     /\   process args  (LEAF (USERDEF uid)) =
	let idx = find_first0 (\p. fst p = uid) strictness_db then
	idx = 0 => 
	    letrec build3 (arg:args) cur =
		let arg' = process [] arg in
		build3 args (APPLY cur arg')
	     /\    build3 [] cur = cur
	    in
	    build3 args (LEAF (USERDEF uid))
	|
	val (_, _, strictness) = el idx strictness_db then
	letrec build4 (st:sts) (arg:args) cur =
	    (NOT st) OR (is_forced arg) =>
		let arg' = process [] arg in
		build4 sts args (APPLY cur arg')
	    |
	    let arg' = process [] arg in
	    build4 sts args (APPLY arg' cur)
	 /\    build4 [] (arg:args) cur =
	    let arg' = process [] arg in
	    build4 [] args (APPLY cur arg')
	 /\    build4 [] [] cur = cur
	in
	build4 strictness args (LEAF (USERDEF uid))
     /\   process args other = other
    in
    process [] E
;

let S_COMB = LEAF (PRIM_FN (name2primfn "P_S")); 
let C_COMB = LEAF (PRIM_FN (name2primfn "P_C")); 
let B_COMB = LEAF (PRIM_FN (name2primfn "P_B")); 
let K_COMB = LEAF (PRIM_FN (name2primfn "P_K")); 
let I_COMB = LEAF (PRIM_FN (name2primfn "P_I")); 
let BSTAR_COMB = LEAF (PRIM_FN (name2primfn "P_BSTAR")); 
let CPRIME_COMB = LEAF (PRIM_FN (name2primfn "P_CPRIME")); 
let SPRIME_COMB = LEAF (PRIM_FN (name2primfn "P_SPRIME")); 
let BPRIME_COMB = LEAF (PRIM_FN (name2primfn "P_BPRIME")); 

let L_COMB cnt = LEAF (PRIM_FN (-1000-cnt)); 

clet is_leftmost v E =
    letrec is_leftmost consts cnt (APPLY E1 E2) =
	let consts' = consts AND NOT (mem v (free E2)) in
	let cnt' = consts' => cnt+1 | cnt in
	is_leftmost consts' cnt' E1
     /\    is_leftmost consts cnt (VAR v1) = (cnt > 1) AND (v1 = v)
     /\    is_leftmost consts cnt other = F
    in
    is_leftmost T 0 E
;


letrec abstract v E assuming (is_leftmost v E) =
    letrec build5 cnt (APPLY E1 E2) =
	mem v (free E2) => APPLY (L_COMB (cnt+1)) (abstract v E1) |
	APPLY (build5 (cnt+1) E1) E2
     /\    build5 cnt (VAR v1) assuming (v1 = v) = L_COMB cnt
     /\    build5 cnt other = other
    in
    build5 0 E
 /\    abstract v (APPLY E1 E2) =
    let is_needed1 = mem v (free E1) in
    let is_needed2 = mem v (free E2) in
    is_needed1 =>
	is_needed2 =>
	    APPLY (APPLY S_COMB (abstract v E1)) (abstract v E2)
	|
	    APPLY (APPLY C_COMB (abstract v E1)) E2
    |
	is_needed2 =>
	    APPLY (APPLY B_COMB E1) (abstract v E2)
	|
	    APPLY K_COMB (APPLY E1 E2)
 /\   abstract v (VAR v2) assuming (v == v2) = I_COMB
 /\   abstract v other = error "Should never happen!"
;

letrec compile2comb (APPLY E1 E2) = APPLY (compile2comb E1) (compile2comb E2)
 /\    compile2comb (CONS E1 E2)  = CONS (compile2comb E1) (compile2comb E2)
 /\    compile2comb (LAMBDA v E) = abstract v (compile2comb E)
 /\    compile2comb other = other
;

letrec optimize_comb (APPLY cC cI)
	    assuming ((cC == C_COMB) AND (cI == I_COMB))
    = (L_COMB 1)
 /\    optimize_comb (APPLY (APPLY cS (APPLY cK p)) (APPLY cK q))
	    assuming ((cS == S_COMB) AND (cK == K_COMB))
    = APPLY K_COMB (APPLY p q)
 /\    optimize_comb (APPLY (APPLY cS (APPLY cK p)) cI)
	    assuming ((cS == S_COMB) AND (cK == K_COMB) AND (cI == I_COMB))
    = p
 /\    optimize_comb (APPLY (APPLY cS (APPLY cK p)) (APPLY (APPLY cB q) r))
	    assuming ((cS == S_COMB) AND (cK == K_COMB) AND (cB == B_COMB))
    = APPLY (APPLY (APPLY BSTAR_COMB p) q) r
 /\    optimize_comb (APPLY (APPLY cS (APPLY cK p)) q)
	    assuming ((cS == S_COMB) AND (cK == K_COMB))
    = APPLY (APPLY B_COMB p) q
 /\    optimize_comb (APPLY (APPLY cS (APPLY (APPLY cB p) q)) (APPLY cK r))
	    assuming ((cS == S_COMB) AND (cK == K_COMB) AND (cB == B_COMB))
    = APPLY (APPLY (APPLY CPRIME_COMB p) q) r
 /\    optimize_comb (APPLY (APPLY cS p) (APPLY cK q)) 
	    assuming ((cS == S_COMB) AND (cK == K_COMB))
    = APPLY (APPLY C_COMB p) q
 /\    optimize_comb (APPLY (APPLY cS (APPLY (APPLY cB p) q)) r)
	    assuming ((cS == S_COMB) AND (cB == B_COMB))
    = APPLY (APPLY (APPLY SPRIME_COMB p) q) r
 /\    optimize_comb (APPLY (APPLY cB p) cI)
	    assuming ((cB == B_COMB) AND (cI == I_COMB))
    = p
 /\    optimize_comb (APPLY cB cB)
	    assuming (cB == B_COMB)
    = BPRIME_COMB
 /\    optimize_comb (APPLY E1 E2) = APPLY (optimize_comb E1) (optimize_comb E2)
 /\    optimize_comb (CONS E1 E2) = CONS (optimize_comb E1) (optimize_comb E2)
 /\    optimize_comb other = other
;


let compile expr_name =
    let db = pre_process expr_name then
    let process (uid, E, strictness) =
	let E' = rearrange db E in
	let comb = compile2comb E' in
	let comb' = optimize_comb (optimize_comb comb) in
	(uid, term2cterm comb')
    in
    map process db
;

let DBG_pre_process expr_name =
    let db = pre_process expr_name then
    draw_cterms (map (\(uid,e,strictness). uid,term2cterm e) db)
;

let DBG_rearrange expr_name =
    let db = pre_process expr_name then
    let process (uid, E, strictness) =
        let E' = rearrange db E in
        (uid, term2cterm E')
    in
    draw_cterms (map process db)
;

let DBG_compile expr_name optimize->T =
    let db = pre_process expr_name then
    let process (uid, E, strictness) =
	let E' = rearrange db E in
	let comb = compile2comb E' in
	let comb' = optimize => optimize_comb (optimize_comb comb) | comb in
	(uid, term2cterm comb')
    in
    draw_cterms (map process db)
;

let node2romline {n::node} =
    let pr b = b=> "1" | "0" in
    list2str T "" "" "" pr (wexpr2bool [] (hw_destr n))
;

let ccomb2node nm =
    (string_hd nm) = "L" =>
	let i = sscanf "L%d" nm then
	'0<--ntype? G_COMB <--comb? C_L <--comb_idx? ''i
    |
    let tbl = [ ("P_S", C_S),
		("P_K", C_K),
		("P_I", C_I),
		("P_C", C_C),
		("P_B", C_B),
		("P_Y", C_Y),
		("P_SPRIME", C_SPRIME),
		("P_CPRIME", C_CPRIME),
		("P_BSTAR", C_BSTAR),
		("P_BPRIME", C_BPRIME) ] in
    let c = (assoc nm tbl)
	    catch (eprintf "Failed to find %s in %S\n" nm (map fst tbl))
    then
    ('0<--ntype? G_COMB <-- comb? c)
;

let cprim2node nm =
    let tbl = [ ("P_PLUS", P_PLUS),
		("P_MINUS", P_MINUS),
		("P_TIMES", P_TIMES),
//		("P_DIV", P_DIV),
//		("P_MOD", P_MOD),
		("P_EQ", P_EQ),
		("P_NEQ", P_NEQ),
		("P_GT", P_GT),
		("P_GEQ", P_GEQ),
		("P_AND", P_AND),
		("P_OR", P_OR),
		("P_NOT", P_NOT),
		("P_COND", P_COND),
		("P_FST", P_FST),
		("P_SND", P_SND),
		("P_TUPLE", P_TUPLE),
		("P_HD", P_HD),
		("P_TL", P_TL),
		("P_IS_NIL", P_IS_NIL),
		("P_CONS", P_CONS),
		("P_NIL", P_NIL) ]
    in
    let p = (assoc nm tbl)
	    catch (eprintf "Failed to find %s in %S\n" nm (map fst tbl))
    then
    ('0<--ntype? G_PRIM <-- prim? p)
;


let mk_rom pgm_list =
    // Put a dummy all 0's in location 0
    let i0 = node2romline '0 then
    let plen = length pgm_list then
    // Make room for one indirection node for each top-level function
    let rres = ref (replicate (plen+1) i0) then 
    let userdef_tbl = zip (map fst pgm_list) (1--plen) then
    let emit1 nd =
	let line =  node2romline nd then
	(rres := (line:(deref rres))) fseq
	(length (deref rres))-1
    in
    letrec emit (cAPPLY e1 e2) =
        let n1 = emit e1 then
        let n2 = emit e2 then
        emit1 ('0 <--ntype? G_APP <--left? ''n1 <--right? ''n2)
     /\   emit (cCONS e1 e2) =
        let n1 = emit e1 then
        let n2 = emit e2 then
        emit1 ('0 <--ntype? G_CONS <--left? ''n1 <--right? ''n2)
     /\   emit (cPRIM nm) = emit1 (cprim2node nm)
     /\   emit (cCOMB nm) = emit1 (ccomb2node nm)
     /\   emit (cUSERDEF uid) =
	    let idx =
		(assoc uid userdef_tbl)
		catch eprintf "Cannot find USERDEF %d" uid
	    then
	    emit1 ('0<--ntype? G_INDIR<--left? ''idx)
     /\   emit (cNIL) = emit1 ('0<--ntype? G_NIL)
     /\   emit (cINT i) =
        // Will it fit in a INT or does it need an AINT list?
        let fit = i >= 0 => i < (2**(INT_SZ-1)) | (-1*i) <= (2**(INT_SZ-1)) in
        fit => emit1 ('0<--ntype ? G_INT <--int   ? ''i) |
        // Need an arbitrary precision list
        letrec emit_aint [i] = emit1 ('0<--ntype ? G_AINT <--aint   ? ''i)
          /\   emit_aint (i:rem) =
            let addr = emit_aint rem then
            let nd = '0<--ntype ? G_AINT
                       <--aint  ? ''i
                       <--left  ? ''addr
            in
            emit1 nd
        in
        let cnv i =
            let es = explode (sprintf "%b" i) in
            let rem = length es % AINT_SZ in
            let add = rem = 0 => 0 | AINT_SZ-rem in
            let msb = hd es in
            let chunks = cluster AINT_SZ ((replicate add msb)@es) in
            let mk l = {''(sscanf "%b" (implode l))::int} in
            rev (map mk chunks)
        in
        emit_aint (cnv i)
    in
    let top_levels = map (\(uid,ct). emit ct) pgm_list then
    let fwds =
	map (\i. node2romline ('0<--ntype? G_INDIR <--left? ''i)) top_levels
    then
    let pgm = butfirstn (plen+1) (rev (deref rres)) then
    let final = (i0:fwds)@pgm then
    let size_cell = node2romline (''(length (deref rres))) then
    size_cell:final
;

let mk_cephalopode_rom file expression_name draw_graph->F =
    // Only draw graph in GUI mode.
    let draw_graph = noX => F | draw_graph in
    let fp = fopen file "w" then
    (
    let ceph_expr = compile expression_name then
    (draw_graph => draw_cterms ceph_expr | ()) fseq
    let rom = mk_rom ceph_expr then
    let pr fp s = fprintf fp "%s" s in
    (fprintf stdout "-I- Writing out %d lines of ROM code to file %s\n"
                    (length rom) file) fseq
    (list2fp fp T "" "\n" "\n" pr rom) fseq
    (fclose fp)
    ) gen_catch (\msg. (fclose fp) fseq error msg)
;





