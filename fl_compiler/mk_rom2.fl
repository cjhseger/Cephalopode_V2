update_vossrc "ADD-DEBUG-INFO" "NO";

// Make sure fl is invoked with -C (or --cephalopode) flag.
(get_combinator_expression "hd" fseq ())
catch error "Need to run fl with -C flag!";

// Get the Cephalopode type declarations needed for the ROM (node).
cload (DIR^"../types.fl");

let Pnode {i::int} =
    let nd = {''i :: node} in
    let C n = wexpr2bool [] (hw_destr n) in
    let tp = C (nd-->ntype) in
      tp = (C G_FREE) =>
        let l = nd-->left in
        sprintf "G_FREE %s" (P_addr l)
    |
      tp = (C G_APP) =>
        let l = nd-->left in
        let r = nd-->right in
        sprintf "G_APP %s %s [<-%s]" (P_addr l) (P_addr r) (P_addr (nd-->up))
    | tp = (C G_COMB) =>
        let Cc n = wexpr2bool [] (hw_destr n) in
        let c = Cc (nd-->comb) in
        let res =
            c == (Cc C_S) => "C_S" |
            c == (Cc C_K) => "C_K" |
            c == (Cc C_I) => "C_I" |
            c == (Cc C_Y) => "C_Y" |
            c == (Cc C_SPRIME) => "C_SPRIME" |
            c == (Cc C_C) => "C_C" |
            c == (Cc C_CPRIME) => "C_CPRIME" |
            c == (Cc C_B) => "C_B" |
            c == (Cc C_BSTAR) => "C_BSTAR" |
            c == (Cc C_BPRIME) => "C_BPRIME" |
            c == (Cc C_S1) => "C_S1" |
            c == (Cc C_S2) => "C_S2" |
            eprintf "Illegal combinator node (%s)" (P_combinator (nd-->comb))
        in
        sprintf "%s [<-%s]" res (P_addr (nd-->up))
    | tp = (C G_PRIM) =>
        let Cp n = wexpr2bool [] (hw_destr n) in
        let p = Cp (nd-->prim) in
        let res =
            p = (Cp P_PLUS) => "P_PLUS" |
            p = (Cp P_MINUS) => "P_MINUS" |
            p = (Cp P_TIMES) => "P_TIMES" |
            p = (Cp P_DIV) => "P_DIV" |
            p = (Cp P_MOD) => "P_MOD" |
            p = (Cp P_EQ) => "P_EQ" |
            p = (Cp P_NEQ) => "P_NEQ" |
            p = (Cp P_GT) => "P_GT" |
            p = (Cp P_GEQ) => "P_GEQ" |
            p = (Cp P_AND) => "P_AND" |
            p = (Cp P_OR) => "P_OR" |
            p = (Cp P_NOT) => "P_NOT" |
            p = (Cp P_COND) => "P_COND" |
            p = (Cp P_PROC_INIT) => "P_PROC_INIT" |
            eprintf "Illegal primitive function node (%s)"
                    (P_primitive (nd-->prim))
        in
        sprintf "%s [<-%s]" res (P_addr (nd-->up))
    | tp = (C G_INDIR) =>
        let l = nd-->left in
        sprintf "G_INDIR %s [<-%s]" (P_addr l) (P_addr (nd-->up))
    | tp = (C G_INT) =>
        let i = nd-->int in
        sprintf "Int %s [<-%s]" (P_Int i) (P_addr (nd-->up))
    | tp = (C G_AINT) =>
        let i = nd-->aint in
        let l = nd-->left in
        sprintf "Aint %s %s [<-%s]" (P_Aint i) (P_addr l) (P_addr (nd-->up))
    | tp = (C G_CONS) =>
        let l = nd-->left in
        let r = nd-->right in
        sprintf "CONS %s %s [<-%s]" (P_addr l) (P_addr r) (P_addr (nd-->up))
    | tp = (C G_NIL) =>
        sprintf "NIL [<-%s]" (P_addr (nd-->up))
    | eprintf "Illegal node type (%s)" (P_g_type (nd-->ntype))
;

// -------------------------------------------------------------------
// fl versions of Cephalopode instructions
// Allows running code in fl and get the same result.
// Are NOT compiled to Cephalopode code.
// -------------------------------------------------------------------

let divmod sel_fun n d = 
	d = 0 => error "Do not know how to handle the Cephalopode NIL..." |
	let q = n / d in
	let r = n % d in
	sel_fun q r
;

// -------------------------------------------------------------------
// Functions that uses Cephalopode instructions to perform fl functions
// Are compiled to Cephalopode code.
// -------------------------------------------------------------------

let i_div {a::int} {b::int} = divmod (\q.\r. q) a b;
let i_mod {a::int} {b::int} = divmod (\q.\r. r) a b;

// -------------------------------------------------------------------
// Functions that uses Cephalopode instructions to perform fl functions
// -------------------------------------------------------------------
let get_prim name = LEAF (PRIM_FN (name2primfn name));

let mk_forcing_comb_1 prim_fn = APPLY (LEAF (PRIM_FN (-1001))) prim_fn;
let mk_forcing_comb_2 prim_fn = APPLY (LEAF (PRIM_FN (-1002))) prim_fn;
let mk_forcing_comb_3 prim_fn = APPLY (LEAF (PRIM_FN (-1003))) prim_fn;
let mk_forcing_comb_4 prim_fn = APPLY (LEAF (PRIM_FN (-1004))) prim_fn;

let cephalopode_functions = [
	// fl name	"primitive function"
	("divmod",	LEAF (PRIM_FN (-1))),
	("AND",		mk_forcing_comb_2 (LEAF (PRIM_FN (-2)))),
	("OR",		mk_forcing_comb_2 (LEAF (PRIM_FN (-3)))),
	("NOT",		mk_forcing_comb_1 (LEAF (PRIM_FN (-4)))),
	("prooc_init",	LEAF (PRIM_FN (-5))),
	("i_plus",	mk_forcing_comb_2 (LEAF (PRIM_FN 9))),
	("i_minus",	mk_forcing_comb_2 (LEAF (PRIM_FN 10))),
	("i_mul",	mk_forcing_comb_2 (LEAF (PRIM_FN 15))),
	("i_div",	mk_forcing_comb_2 (get_combinator_expression "i_div")),
	("i_mod",	mk_forcing_comb_2 (get_combinator_expression "i_mod")),
	("=",		mk_forcing_comb_2 (LEAF (PRIM_FN 23))),
	("!=",		mk_forcing_comb_2 (LEAF (PRIM_FN 24))),
	("i_gt",	mk_forcing_comb_2 (LEAF (PRIM_FN 21))),
	("i_ge",	mk_forcing_comb_2 (LEAF (PRIM_FN 22))),
	("cond",	mk_forcing_comb_1 (LEAF (PRIM_FN 18)))
];

let built_ins_combinators = [
    // fl's PRIM_FN id	Cephalopode name
    // -----------------------------------------
    // Combinators
    // -----------------------------------------
    (-1001,		C_S1),
    (-1002,		C_S2),
    (0,                 C_S),
    (1,                 C_K),
    (2,                 C_I),
    (3,                 C_C),
    (4,                 C_B),
    (31,                C_SPRIME),
    (32,                C_CPRIME),
    (33,                C_BSTAR),
    (5,                 C_Y),
    (69,                C_BPRIME)
];

let built_ins_functions = [
    // -----------------------------------------
    // Primitive functions
    // -----------------------------------------
    (9,                 P_PLUS),
    (10,                P_MINUS),
    (15,                P_TIMES),
    (23,                P_EQ),
    (24,                P_NEQ),
    (21,                P_GT),
    (22,                P_GEQ),
    (18,                P_COND),
    // In Cephalopode only
    (-1,		P_DIV),
    (-2,		P_MOD),
    (-3,		P_AND),
    (-4,		P_OR),
    (-5,		P_NOT),
    (-6,		P_PROC_INIT)
];

//    (6,                 "P_HEAD"),
//    (7,                 "P_TAIL"),
//    (8,                 "P_CONS"),
//    (16,                "P_DIVIDE"),
//    (19,                "P_LESS"),
//    (20,                "P_LEQ"),
//    (25,                "P_VAR"),
//    (26,                "P_CAT"),
//    (27,                "P_EMPTY"),
//    (28,                "P_LOAD"),
//    (29,                "P_ERROR"),
//    (30,                "P_SEQ"),
//    (34,                "P_HELP"),
//    (36,                "P_FORALL"),
//    (37,                "P_THEREIS"),
//    (38,                "P_PRINT"),
//    (39,                "P_DEBUG"),
//    (40,                "P_IDENTICAL"),
//    (41,                "P_STRING_HD"),
//    (42,                "P_STRING_TL"),
//    (43,                "P_FAIL"),
//    (44,                "P_IS_CONS"),
//    (45,                "P_CATCH"),
//    (46,                "P_SUC"),
//    (47,                "P_CONSTR_EQ"),
//    (48,                "P_QUANT_FORALL"),
//    (49,                "P_QUANT_THEREIS"),
//    (50,                "P_PFAIL"),
//    (51,                "P_PCATCH"),
//    (52,                "P_ORD"),
//    (53,                "P_CHR"),
//    (54,                "P_TUPLE"),
//    (55,                "P_FST"),
//    (56,                "P_SND"),
//    (58,                "P_EXPLODE"),
//    (59,                "P_IMPLODE"),
//    (60,                "P_DEPENDS"),
//    (61,                "P_BOOL2STR"),
//    (62,                "P_INT2STR"),
//    (63,                "P_TIME"),
//    (64,                "P_BDD_SIZE"),
//    (65,                "P_SUBSTITUTE"),
//    (66,                "P_LOAD_EXE"),
//    (68,                "P_PRINT_STE"),
//    (70,                "P_FANIN_LIST"),
//    (71,                "P_NODES"),
//    (72,                "P_PROFILE"),
//    (73,                "P_GET_NODE_VAL"),
//    (74,                "P_FANOUT_LIST"),
//    (75,                "P_GET_DELAYS"),
//    (76,                "P_TRACE"),
//    (77,                "P_SAVE_FSM"),
//    (78,                "P_BDD_SAVE"),
//    (79,                "P_BDD_LOAD"),
//    (80,                "P_BDD_REORDER"),
//    (81,                "P_RELPROD_THEREIS"),
//    (82,                "P_RELPROD_FORALL"),
//    (83,                "P_RVAR"),
//    (84,                "P_VAR_ORDER"),
//    (85,                "P_SYSTEM"),
//    (86,                "P_EVAL"),
//    (87,                "P_GCD"),
//    (88,                "P_LP"),
//    (89,                "P_CACHE"),
//    (90,                "P_IS_TUPLE"),
//    (91,                "P_STRICT_CONS"),
//    (92,                "P_STRICT_TUPLE"),
//    (93,                "P_FSM_OBJECT"),
//    (94,                "P_IS_STABLE"),
//    (95,                "P_MK_REF_VAR"),
//    (96,                "P_DEREFERENCE"),
//    (97,                "P_UPDATE_RVAR"),
//    (98,                "P_REF_VAR"),
//    (99,                "P_WRITE_TO_FILE"),
//    (100,               "P_BVAND"),
//    (101,               "P_BVOR"),
//    (102,               "P_BVXOR"),
//    (103,               "P_BVNOT"),
//    (104,               "P_GET_EXCIT"),
//    (105,               "P_TCL_EVAL"),
//    (106,               "P_FSEQ"),
//    (107,               "P_NSEQ"),
//    (108,               "P_PRINTF"),
//    (109,               "P_SPRINTF"),
//    (110,               "P_EPRINTF"),
//    (111,               "P_FPRINTF"),
//    (112,               "P_FILEFP"),
//    (113,               "P_FOPEN"),
//    (114,               "P_FCLOSE"),
//    (115,               "P_FFLUSH"),
//    (116,               "P_GEN_CATCH"),
//    (117,               "P_GET_VOSSRC"),
//    (118,               "P_UPDATE_VOSSRC"),
//    (119,               "P_EXTAPI_FN"),
//    (120,               "P_SAVE_GRAPH"),
//    (121,               "P_LOAD_GRAPH"),
//    (122,               "P_EXIT"),
//    (123,               "P_THEN"),
//    (124,               "P_SSCANF"),
//    (125,               "P_UNTYPE"),
//    (126,               "P_UNQUOTE"),
//    (200,               "P_START_SUPER_COMB"),
//    (1022,              "P_VOID"),
//    (1023,              "P_ILLEGAL"),



let node2romline {n::node} =
    let pr b = b=> "1" | "0" in
    list2str T "" "" "" pr (wexpr2bool [] (hw_destr n))
;

let is_member key l = (find_first0 (\(k,_). k = key) l) != 0;

let emit_leaf rres lt =
    let emit1 nd =
	(rres := (node2romline nd:(deref rres))) fseq
	let res = length (deref rres)-1 then
	res
    in
    let do_emit (INT i) =
	// Will it fit in a INT or does it need an AINT list?
	let fit = i >= 0 => i < (2**(INT_SZ-1)) | (-1*i) <= (2**(INT_SZ-1)) in
	fit => emit1 ('0<--ntype ? G_INT <--int   ? ''i) |
	// Need an arbitrary precision list
	letrec emit_aint [i] = emit1 ('0<--ntype ? G_AINT <--aint   ? ''i)
	  /\   emit_aint (i:rem) =
	    let addr = emit_aint rem then
	    let nd = '0<--ntype ? G_AINT
		       <--aint  ? ''i
		       <--left  ? ''addr
	    in
	    emit1 nd
	in
	let cnv i =
	    let es = explode (sprintf "%b" i) in
	    let rem = length es % AINT_SZ in 
	    let add = rem = 0 => 0 | AINT_SZ-rem in
	    let msb = hd es in
	    let chunks = cluster AINT_SZ ((replicate add msb)@es) in
	    let mk l = {''(sscanf "%b" (implode l))::int} in
	    rev (map mk chunks)
	in
	emit_aint (cnv i)
     /\ do_emit (STRING s) =
	eprintf "STRING leaftype not supported yet (string %s)" s
     /\ do_emit (BOOL e) =
	e == T => emit1 ('0<--ntype ? G_INT <--int ? '1) |
	e == F => emit1 ('0<--ntype ? G_INT <--int ? '0) |
	eprintf "BOOL leaftype not supported for BDD expressions (%B)" e
     /\ do_emit (BEXPR be) =
	eprintf "BEXPR leaftype not supported"
     /\ do_emit (EXT_OBJ i) =
	eprintf "EXT_OBJ leaftype not supported"
     /\ do_emit (PRIM_FN pfn) =
	    is_member pfn built_ins_combinators =>
		let cfn = assoc pfn built_ins_combinators in
		emit1 ('0<--ntype? G_COMB<--comb? cfn)
	    |
	    is_member pfn built_ins_functions =>
		let cfn = assoc pfn built_ins_functions in
		emit1 ('0<--ntype? G_PRIM<--prim? cfn)
	    |
	    eprintf "Unsupported prim function (%d %s)" pfn (primfn2name pfn)
     /\ do_emit (EXT_PRIM_FN pfn s) =
	    eprintf "EXT_PRIM_FN not supported yet (%d %s)" pfn s
     /\ do_emit (USERDEF i) =
	    eprintf "USERDEF %d is not supported in emit" i
    in
    do_emit lt
;

let mk_rom comb_expr =
    // Put a dummy all 0's in location 0
    let i0 = node2romline '0 then
    // Put a dummy node in location 1 to be replaced by an indirection to root
    let rres = ref [i0,i0] then
    letrec emit (APPLY e1 e2) =
        let n1 = emit e1 then
        let n2 = emit e2 then
	let cmd = node2romline ('0 <--ntype? G_APP
				   <--left? ''n1
				   <--right? ''n2)
	then
        (rres := (cmd : (deref rres))) fseq
        let res = length (deref rres)-1 then
	res
     /\   emit (LEAF lt) =
	emit_leaf rres lt
     /\   emit (VAR s) =
	eprintf "Combinator expression with free variable (%s)" s
     /\   emit (LAMBDA s t) =
	eprintf "Combinator expression with lambdas (%s)" s
     /\   emit (CONS h t) =
	eprintf "CONS not supported yet"
     /\   emit (NIL) =
	eprintf "NIL not supported yet"
    in
    let top = emit comb_expr then
    let cell0 = node2romline (''top) in
    val (d0:dummy:pgm) = rev (deref rres) in
    let real_root = node2romline ('0 <--ntype? G_INDIR <--left? ''top) then
    let res = cell0:d0:real_root:pgm then
    res
;

let cond_prim_fn = name2primfn "P_COND";


let is_done key key_data_list =
    (find_first0 (\kd. fst kd == key) key_data_list) != 0
;

letrec optimize (APPLY (APPLY (APPLY (LEAF (PRIM_FN pfn)) fn) A) B)
    assuming (-1002 == pfn) = APPLY B (APPLY B fn)
 /\    optimize (APPLY (APPLY (LEAF (PRIM_FN pfn)) fn) A)
    assuming (-1001 == pfn) = APPLY A fn
 /\    optimize (APPLY (LEAF (PRIM_FN pfn)) E) 
    assuming (pfn == 2) = E
 /\    optimize (APPLY e1 e2) = APPLY (optimize e1) (optimize e2)
 /\    optimize other = other
;

let base_compile top_uid =
    let res = ref [] in
    let inc_refcnt_ref i =
	val (r_exp, r_cnt) = assoc i (deref res) then
	(r_cnt := ((deref r_cnt)+1))
    in
    let get_refcnt i =
	val (r_exp, r_cnt) = assoc i (deref res) then
	deref r_cnt
    in
    let update_expr i exp_expr =
	val (r_exp, r_cnt) = assoc i (deref res) then
	(r_exp := SOME exp_expr)
    in
    let get_expr i =
	val (r_exp, r_cnt) = assoc i (deref res) then
	get_value (deref r_exp)
    in
    letrec process_userdef uid =
(fprintf stderr "Processing %d\n" uid) fseq
	let cur = deref res then
	is_done uid cur => () |
	(res := ((uid, (ref NONE, ref 0)):cur)) fseq
	val (name,expr) = get_userdef_combinator_expression uid then
	letrec process (APPLY e1 e2) = APPLY (process e1) (process e2)
	 /\    process (LEAF (USERDEF i)) =
	    val (lname,lexpr) = get_userdef_combinator_expression i then
	    is_member lname cephalopode_functions =>
		process (assoc lname cephalopode_functions)
	    |
	    (process_userdef i) fseq
	    (inc_refcnt_ref i) fseq
	    (LEAF (USERDEF i))
	 /\    process (LEAF (EXT_PRIM_FN 39 s)) =
	    (LEAF (PRIM_FN 2)) // DEBUG-->P_I
	 /\    process (LEAF (PRIM_FN pfn)) assuming (pfn = cond_prim_fn) =
	    mk_forcing_comb_1  (LEAF (PRIM_FN cond_prim_fn))
	 /\    process (VAR s) =
	    eprintf "VAR in combinator expression??? (%s)" s
	 /\    process (LAMBDA s b) =
	    eprintf "LAMBDA in combinator expression??? (%s)" s
	 /\    process other = other
	in
	let exp_expr = process expr then
(fprintf stderr "Result for %d: %s\n" uid (DBGterm exp_expr)) fseq
	(update_expr uid exp_expr)
    in
    (process_userdef top_uid) fseq
    (inc_refcnt_ref top_uid) fseq
    (inc_refcnt_ref top_uid) fseq
    //
    // Merge expressions used only once
    //
    letrec expand_id cur_id =
	get_refcnt cur_id <= 1 => [] |
	letrec expand (APPLY e1 e2) = APPLY (expand e1) (expand e2)
	 /\    expand (LEAF (USERDEF i)) =
	    get_refcnt i > 1 => (LEAF (USERDEF i)) | expand (get_expr i)
	 /\    expand other = other
	in
	let e' =  expand (get_expr cur_id) then
	let e'' = optimize e' then
	[(cur_id, e'')]
    in
    let new = rev (flatmap (\t. expand_id (fst t)) (deref res)) then
(fprintf stderr "%s\n" (list2str T "new: [\n  " ",\n  " "\n]" (\(cid,e). sprintf "uid %d: %s" cid (DBGterm e)) new)) fseq
    let top_level_funs = length new in
    // Give id's to all UID's with reference count > 1
    // location 0 = 0
    // location 1 = indirection to top
    // Put a dummy node in locations 1-(top_level_funs+2) to be replaced
    // by indirection nodes to the real roots
    let const0 = node2romline '0 then
    let rres = ref (replicate (1+top_level_funs) const0) then
    let mapping = zip (map fst new) (1 upto top_level_funs) in
    let make_fn (uid, expr) =
	letrec emit (APPLY e1 e2) =
	    let n1 = emit e1 then
	    let n2 = emit e2 then
	    let cmd = node2romline ('0 <--ntype? G_APP
				       <--left? ''n1
				       <--right? ''n2)
	    then
	    (rres := (cmd : (deref rres))) fseq
	    let res = length (deref rres)-1 then
	    res
	 /\   emit (LEAF (USERDEF i)) =
	    let fn_location = assoc i mapping then
	    let cmd = node2romline ('0 <--ntype? G_INDIR
				       <--left? ''fn_location)
	    then
	    (rres := (cmd : (deref rres))) fseq
	    let res = length (deref rres)-1 then
	    res
	 /\   emit (LEAF lt) =
	    emit_leaf rres lt
	 /\   emit (VAR s) =
	    eprintf "Combinator expression with free variable (%s)" s
	 /\   emit (LAMBDA s t) =
	    eprintf "Combinator expression with lambdas (%s)" s
	 /\   emit (CONS h t) =
	    eprintf "CONS not supported yet"
	 /\   emit (NIL) =
	    eprintf "NIL not supported yet"
	in
	let res_addr = emit expr then
	node2romline ('0 <--ntype? G_INDIR <--left? ''res_addr)
    in
    let top_exprs = map make_fn new then
    let length_info = node2romline (''(length (deref rres))) in
    length_info:const0:(top_exprs@(butfirstn 3 (rev (deref rres))))
;



let mk_cephalopode_rom file expression_name =
    let fp = fopen file "w" then
    (
    let id = get_userdef_id expression_name then
    let rom = base_compile id then
    let pr fp s = fprintf fp "%s" s in
    (fprintf stdout "-I- Writing out %d lines of ROM code to file %s\n"
                    (length rom) file) fseq
    (list2fp fp T "" "\n" "\n" pr rom) fseq
    (fclose fp)
    ) gen_catch (\msg. (fclose fp) fseq error msg)
;

let P_rom rom = 
    (fprintf stdout "%d\n" (sscanf "%b" (hd rom))) fseq
    (
    letrec pr line (r:rs) =
	(fprintf stdout "0x%-3x: %s\n" line (Pnode (sscanf "%b" r))) fseq
	(pr (line+1) rs)
     /\    pr line [] = ()
    in
    pr 0 (tl rom)
    )
;

%%%%%%%%%%%%%

let id = get_userdef_id "e";
id;

let rom = base_compile id;
rom;

P_rom rom;

map (\s. Pnode (sscanf "%b" s)) (tl rom);



let inc x = x+1;
let e = inc 99;
mk_cephalopode_rom "_Q1_.rom" "e";


forward_declare {sum::int->int};
let sum n = n = 0 => 0 | n+sum (n-1);
let e = sum 3;

mk_cephalopode_rom "_Q2_.rom" "e";


%%%%%%%%%%%%%



foreach (\i. printf "%s\n" (Pnode i)) [0x54,0x284,0x27161,0x261b1,0x251e1,0x24231,0x15,0x221f1,0x21201,0x13,0xb2,0x52,0x1d1c1,0x24,0x72,0x1a171,0x19181,0x3,0xb2,0x2,0x15061,0x14131,0x5,0x120b1,0x11101,0x5,0xf0c1,0xe0d1,0x43,0xb2,0x52,0xa071,0x9081,0xb3,0xa2,0x62,0x2,0x4031,0x45,0x24,0x0,0x0,0x0];






    let top = emit comb_expr then
    let cell0 = node2romline (''top) in
    val (d0:dummy:pgm) = rev (deref rres) in
    let real_root = node2romline ('0 <--ntype? G_INDIR <--left? ''top) then
    let res = cell0:d0:real_root:pgm then
    res
;


new;

    let location = ref 2 in

 /\ base_compile other =
    eprintf "Cano only compile top-level variables (%s)" (Pterm other)
;

	
    



let cephalopode_expr e =
    let loops = ref (tbl_create 100) then

    letrec expand (APPLY e1 e2) = APPLY (expand e1) (expand e2)
     /\    expand (LEAF (USERDEF i)) =
	tbl_member (deref loops) i => (LEAF (USERDEF i)) |
	(loops := (tbl_insert (deref loops) i T)) fseq
	let res =
	    val (name,expr) = get_userdef_combinator_expression i then
	    is_member name cephalopode_functions =>
		expand (assoc name cephalopode_functions)
	    |
	    expand expr
	then
	res
     /\    expand (LEAF (EXT_PRIM_FN 39 s)) = (LEAF (PRIM_FN 2)) // DEBUG-->P_I
     /\    expand (LEAF (PRIM_FN pfn)) assuming (pfn = cond_prim_fn) =
	    mk_forcing_comb_1  (LEAF (PRIM_FN cond_prim_fn))
     /\    expand (VAR s) =
	eprintf "VAR in combinator expression??? (%s)" s
     /\    expand (LAMBDA s b) =
	eprintf "LAMBDA in combinator expression??? (%s)" s
     /\    expand other = other
    in

    let exp_e = expand e then
    (exp_e, map fst (tbl2list (deref loops)))
;

let mk_cephalopode_rom file expression_name =
    let fp = fopen file "w" then
    (
    let fl_expr = get_combinator_expression expression_name then
    let ceph_expr = cephalopode_expr fl_expr then
    val rom = mk_rom ceph_expr then
    let pr fp s = fprintf fp "%s" s in
    (fprintf stdout "-I- Writing out %d lines of ROM code to file %s\n"
		    (length rom) file) fseq
    (list2fp fp T "" "\n" "\n" pr rom) fseq
    (fclose fp)
    ) gen_catch (\msg. (fclose fp) fseq error msg)
;
;

