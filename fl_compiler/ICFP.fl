cload "mk_rom3.fl";


forward_declare {fac:: int->int};
let fac n = n=1 => 1 | n * fac (n-1);

forward_declare {dot :: (int list) -> (int list) -> int};
let dot l1 l2 =
    (l1 = []) OR (l2 = []) => 0 |
    ((hd l1)*(hd l2)) + (dot (tl l1) (tl l2))
;

forward_declare {mul1 :: (int list) -> (int list) -> int};
let mul1 mr v =
    mr = [] => 0 |
    ((hd mr)*(hd v)) + (mul1 (tl mr) (tl v))
;

forward_declare {mmult :: ((int list) list) -> (int list) -> (int list)};
let mmult M v =
    M = [] => [] |
    (mul1 (hd M) v):(mmult (tl M) v)
;

let mmult_all = mmult [] [];

forward_declare {ReLU :: (int list) -> (int list)};
let ReLU v = 
    v = [] => [] |
    let h = hd v in
    (h >= 0 => h | 0):(ReLU (tl v))
;

let NN_stage M v = ReLU (mmult M v);

forward_declare
    {NeuralNetwork :: (((int list) list) list) -> (int list) -> (int list)}
;
let NeuralNetwork Ms vec =
    Ms = [] => vec |
    NeuralNetwork (tl Ms) (NN_stage (hd Ms) vec)
;

let M = [
  [
    [19, 6, -10, 13, -1, -6, -5, 19, -16],
    [11, -16, 11, 9, -13, -14, -4, 13, -5],
    [-19, 13, -10, 3, 20, -2, -10, 8, -5],
    [-17, -5, 8, -17, -7, 3, -7, -5, -19],
    [17, 20, -20, -19, 10, -6, 12, -1, 1],
    [18, -16, 4, 2, -15, 6, -19, 8, 5],
    [-1, -13, 2, -17, 0, 17, 12, 3, -11],
    [-6, -15, 4, 6, -19, 3, 16, -18, 3],
    [-11, -17, -9, 20, -20, -5, 3, 13, 10],
    [-2, 14, -3, -17, -7, 14, 5, 6, -7],
    [12, -3, 16, -10, -19, -10, 15, 17, 1],
    [7, 12, 4, -11, -10, 17, 10, -11, -13]
  ],
  [
    [-16, -18, 20, 14, 0, -18, 0, 13, 5, -7, 8, -9],
    [16, -1, 8, -20, 19, 19, -10, -18, -16, 12, 10, 16],
    [5, -12, -15, 11, 19, 5, 18, -8, 17, -14, -4, 6],
    [-11, 16, 9, 14, -1, -4, -16, -6, -16, -18, -5, -18],
    [-10, 15, -15, -5, 16, -16, 0, 10, 2, 16, 1, 10],
    [0, -2, -18, 6, 15, -2, -9, -17, 3, 20, -14, -19],
    [5, -9, 6, 9, 3, -10, -19, 13, -16, -4, -3, -10],
    [10, 18, 20, -9, 13, 0, -19, 2, -12, -7, -3, -18],
    [-20, 8, -5, 3, 18, 1, 15, 2, -19, 0, 1, 4],
    [20, 12, 7, -17, -13, -17, -7, 17, -10, 3, -3, -8],
    [-8, 8, -17, 0, -10, 0, 12, -10, -2, -4, -17, -5]
  ],
  [
    [18, 18, 17, 19, 7, 7, 13, 6, -2, -1, 19],
    [15, 12, 2, 11, -8, -16, -2, 4, -4, -15, 18],
    [-14, 6, -3, -13, 16, 15, 4, 19, -11, 1, -15],
    [-4, 9, -19, -18, 1, 7, 11, 20, 6, 5, -19],
    [-3, 6, -7, 1, -17, -14, -14, -2, -17, -8, -17],
    [1, 0, -11, 5, -7, -3, -16, 14, 3, 0, 2],
    [4, 12, -17, 1, 2, -8, -4, -3, 3, 13, -18],
    [-15, 3, -5, -8, 9, 13, 5, -9, -14, -5, -20]
  ],
  [
    [5, -20, -7, -19, -16, -4, 14, 14]
  ]
];

let vec = [-13, 8, 5, -10, -2, -3, 13, 14, 14];

let answer = 0;
let main = (hd (NeuralNetwork M vec)) = answer;
mk_cephalopode_rom "_NeuralNetwork.rom" "main";


use_optimizer := T;
use_L	      := T;
use_Cn	      := T;
use_Spp	      := T;

let square {v::int} = v*v;
let sqdistance l1 l2 =
    (square ((hd l1)-(hd l2)))+
    let l1 = tl l1 in
    let l2 = tl l2 in
    (square ((hd l1)-(hd l2)))+
    let l1 = tl l1 in
    let l2 = tl l2 in
    (square ((hd l1)-(hd l2)))
;

forward_declare {min_distance :: ((int list) list) -> (int list) -> int};
let min_distance locs my_pos =
    locs = [] => 100 |
    let cur = sqdistance (hd locs) my_pos in
    let rem = min_distance (tl locs) my_pos in
    rem >= cur => cur | rem
;

//let locs = [[7,8,10],[10,6,-1],[5,6,8],[-2,-2,-8],[4,-1,-10],[10,4,9],[1,-10,10],[-1,-9,-5],[0,-3,3],[-6,-2,-4],[4,4,4],[-8,3,-1],[1,-2,4],[-2,-5,1],[10,9,10],[-10,-2,-8],[9,9,-7],[8,8,4],[3,-3,-10],[5,1,-2],[-10,4,-8],[-7,-4,-6],[-9,7,-9],[5,5,-3],[5,-7,5],[-6,-7,2],[-4,2,1],[9,9,8],[2,-10,-6],[-8,5,-6]];
let locs = [[7,8,10],[10,6,-1]];
let my_loc = [1,3,-2];
let min_distance_all = min_distance locs my_loc;
mk_cephalopode_rom "_min_distance_all.rom" "min_distance_all" T;


min_distance_all2;

// Without L & C
use_L  := F;
use_Cn := F;
mk_cephalopode_rom "_ZZ" "fac";
mk_cephalopode_rom "_ZZ" "dot";
mk_cephalopode_rom "_ZZ" "mmult_all";
mk_cephalopode_rom "_ZZ" "NeuralNetwork_all";
mk_cephalopode_rom "_ZZ" "min_distance_all";

// With L & C
use_L  := T;
use_Cn := T;
mk_cephalopode_rom "_ZZ" "fac" T;
mk_cephalopode_rom "_ZZ" "dot" T;
mk_cephalopode_rom "_ZZ" "mmult" T;
mk_cephalopode_rom "_ZZ" "NeuralNetwork" T;
mk_cephalopode_rom "_ZZ" "min_distance" T;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

let mk_dist_list N n =
    map (\i.  [(random (-1*N) N), (random (-1*N) N), (random (-1*N) N)])
    (1 upto n)
;

mk_dist_list 10 30;
