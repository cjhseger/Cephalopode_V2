cload (DIR^"types.fl");

MEMORY "RAM" [(RAM_SIZE, "eaddr")] "node";

let behavioral_RAM =
    bit_input		clk.
    bit_input		rw.
    eaddr_input     addr.
    node_input	inp.
    node_output	out.
    //
    bit_internal        addr_rdy rw_rdy inp_rdy rd_rdy wr_rdy.
    RAM_internal	ram tmp_new_ram new_ram.
    node_internal  local_rd_data.
    CELL "behavioral_RAM" [
        is_stable RAM_LATENCY addr addr_rdy,
        is_stable RAM_LATENCY rw rw_rdy,
        is_stable RAM_LATENCY inp inp_rdy,
        rd_rdy <- addr_rdy '&' rw_rdy,
        Read_RAM ram addr local_rd_data,
        out <- (IF (rd_rdy '&' rw) THEN local_rd_data ELSE 'X),
        Write_RAM ram addr inp tmp_new_ram,
        wr_rdy <- rd_rdy '&' inp_rdy,
        new_ram <- (IF (wr_rdy '&' '~' rw) THEN tmp_new_ram ELSE ram),
	re_ff clk new_ram ram
];


BUNDLE "B_RAM_read"
        [("clkenb", "bit"), ("req", "bit"), ("addr", "eaddr")]
        [("ack", "bit"), ("data", "node")]
;

BUNDLE "B_cRAM_write"
        [("clkenb", "bit"), ("req", "bit"), ("addr", "caddr"), ("data", "ctrl_word")]
        [("ack", "bit")]
;

let RAM =
    bit_input		clk.
    bit_input		reset.
    B_RAM_read_input	S_RAM_read.
    B_RAM_write_input	S_RAM_write.
    //
    eaddr_internal	my_addr.
    bit_internal	rw.
    bit_internal	done_rd done_wr.
    CELL "RAM" [
	rw <- '~' (S_RAM_write-->req),
	my_addr <- (IF (S_RAM_read-->req) THEN (S_RAM_read-->addr)
					ELSE (S_RAM_write-->addr)),
	//
	behavioral_RAM clk rw my_addr (S_RAM_write-->data) (S_RAM_read-->data),
	//
	ackpulse_delay (RAM_LATENCY/2) clk reset
			(S_RAM_read-->req) (S_RAM_read-->ack),
	ackpulse_delay (RAM_LATENCY/2) clk reset
			(S_RAM_write-->req) (S_RAM_write-->ack)
];

create_default_version RAM;
