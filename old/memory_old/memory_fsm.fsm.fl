// memory_fsm (autogenerated by Stately)

cload "ste.fl";

ENUM "memory_fsm_state"
    [ "CTRLDONE"
    , "BASE_INIT"
    , "DO_RD"
    , "DO_SNAP_RD"
    , "DO_WR"
    , "FST_SNAP_WR_DONE"
    , "INIT"
    , "MAIN"
    , "RD_DONE"
    , "READ_INSTR"
    , "READ_PGM"
    , "READ_SZ"
    , "RW_TEST"
    , "SELECT"
    , "SLOW_DO_RD"
    , "SNAP_RD_DONE"
    , "SNAP_WRITE"
    , "WR_DONE"
    , "WRITE_FREE"
    , "WRITE_INSTR"
    ];

let memory_fsm =
    // clock
    bit_input clk.
    // inputs
    bit_input reset.
    bit_input cdo_init_ack.
    bit_input crd_ack.
    bit_input cwr_ack.
    bit_input in_smode.
    bit_input instrs_done.
    bit_input last_ordinary.
    bit_input mdo_init_ack.
    bit_input mem_init_req.
    bit_input rd_ram_rdy.
    bit_input rd_rom_done.
    bit_input read_req.
    bit_input save_same_live.
    bit_input snap_read_req.
    bit_input wr_ram_rdy.
    bit_input write_req.
    // outputs
    bit_output cdo_init_req.
    bit_output crd_req.
    bit_output cwr_req.
    bit_output do_rd_ram.
    bit_output do_wr_ram1.
    bit_output do_wr_ram2.
    bit_output inc_cp_cnt.
    bit_output is_init_op.
    bit_output is_rd_op.
    bit_output is_snap_rd_op.
    bit_output is_wr_op.
    bit_output mdo_init_req.
    bit_output mem_init_ack.
    bit_output rd_rom.
    bit_output read_ack.
    bit_output record_top_of_heap.
    bit_output snap_read_ack.
    bit_output write_ack.
    // internals
    // state
    memory_fsm_state_internal state.
    CELL "draw_hier memory_fsm"
        [ Moore_FSM "memory_fsm_moore" clk state (reset, INIT)
              [ CTRLDONE --- mdo_init_ack --- READ_SZ
              , BASE_INIT --- cdo_init_ack --- CTRLDONE
              , DO_SNAP_RD --- crd_ack --- SNAP_RD_DONE
              , DO_WR --- (crd_ack '&' (('~' in_smode) '|' ('~' save_same_live))) --- WR_DONE
              , DO_WR --- (crd_ack '&' ('~' (('~' in_smode) '|' ('~' save_same_live)))) --- SNAP_WRITE
              , FST_SNAP_WR_DONE --- wr_ram_rdy --- MAIN
              , INIT --- mem_init_req --- BASE_INIT
              , MAIN --- ((read_req '&' (('~' snap_read_req) '|' ('~' last_ordinary))) '&' crd_ack) --- RD_DONE
              , MAIN --- ((read_req '&' (('~' snap_read_req) '|' ('~' last_ordinary))) '&' ('~' crd_ack)) --- SLOW_DO_RD
              , MAIN --- (('~' (read_req '&' (('~' snap_read_req) '|' ('~' last_ordinary)))) '&' (write_req '&' (('~' snap_read_req) '|' ('~' last_ordinary)))) --- DO_WR
              , MAIN --- (('~' (read_req '&' (('~' snap_read_req) '|' ('~' last_ordinary)))) '&' ('~' (write_req '&' (('~' snap_read_req) '|' ('~' last_ordinary)))) '&' (snap_read_req '&' (('~' (read_req '|' write_req)) '|' last_ordinary))) --- DO_SNAP_RD
              , MAIN --- (('~' (read_req '&' (('~' snap_read_req) '|' ('~' last_ordinary)))) '&' ('~' (write_req '&' (('~' snap_read_req) '|' ('~' last_ordinary)))) '&' ('~' (snap_read_req '&' (('~' (read_req '|' write_req)) '|' last_ordinary)))) --- MAIN
              , RD_DONE --- rd_ram_rdy --- MAIN
              , READ_INSTR --- rd_rom_done --- WRITE_INSTR
              , READ_PGM --- instrs_done --- WRITE_FREE
              , READ_PGM --- ('~' instrs_done) --- READ_INSTR
              , READ_SZ --- rd_rom_done --- READ_PGM
              , SLOW_DO_RD --- crd_ack --- RD_DONE
              , SNAP_RD_DONE --- rd_ram_rdy --- MAIN
              , SNAP_WRITE --- cwr_ack --- FST_SNAP_WR_DONE
              , WR_DONE --- wr_ram_rdy --- MAIN
              , WRITE_FREE --- '1 --- MAIN
              , WRITE_INSTR --- wr_ram_rdy --- READ_PGM
              ]
        , write_ack <- (((is_FST_SNAP_WR_DONE state) '&' wr_ram_rdy) '|' ((is_WR_DONE state) '&' wr_ram_rdy))
        , read_ack <- ((is_RD_DONE state) '&' rd_ram_rdy)
        , is_rd_op <- (((is_MAIN state) '&' (read_req '&' (('~' snap_read_req) '|' ('~' last_ordinary)))) '|' (is_RD_DONE state) '|' (is_SLOW_DO_RD state))
        , is_init_op <- ((is_CTRLDONE state) '|' (is_BASE_INIT state) '|' (is_READ_INSTR state) '|' (is_READ_PGM state) '|' (is_READ_SZ state) '|' (is_WRITE_FREE state) '|' (is_WRITE_INSTR state))
        , mdo_init_req <- (is_CTRLDONE state)
        , snap_read_ack <- ((is_SNAP_RD_DONE state) '&' rd_ram_rdy)
        , is_wr_op <- ((is_DO_WR state) '|' (is_FST_SNAP_WR_DONE state) '|' ((is_MAIN state) '&' (('~' (read_req '&' (('~' snap_read_req) '|' ('~' last_ordinary)))) '&' (write_req '&' (('~' snap_read_req) '|' ('~' last_ordinary))))) '|' (is_SNAP_WRITE state) '|' (is_WR_DONE state))
        , rd_rom <- ((is_READ_INSTR state) '|' (is_READ_SZ state))
        , inc_cp_cnt <- (is_READ_PGM state)
        , cwr_req <- (is_SNAP_WRITE state)
        , do_wr_ram1 <- ((is_WR_DONE state) '|' (is_WRITE_INSTR state))
        , do_wr_ram2 <- (is_FST_SNAP_WR_DONE state)
        , record_top_of_heap <- (is_WRITE_FREE state)
        , cdo_init_req <- (is_BASE_INIT state)
        , is_snap_rd_op <- ((is_DO_SNAP_RD state) '|' ((is_MAIN state) '&' (('~' (read_req '&' (('~' snap_read_req) '|' ('~' last_ordinary)))) '&' ('~' (write_req '&' (('~' snap_read_req) '|' ('~' last_ordinary)))) '&' (snap_read_req '&' (('~' (read_req '|' write_req)) '|' last_ordinary)))) '|' (is_SNAP_RD_DONE state))
        , do_rd_ram <- ((is_RD_DONE state) '|' (is_SNAP_RD_DONE state))
        , mem_init_ack <- (is_WRITE_FREE state)
        , crd_req <- ((is_DO_SNAP_RD state) '|' (is_DO_WR state) '|' ((is_MAIN state) '&' (read_req '&' (('~' snap_read_req) '|' ('~' last_ordinary)))) '|' (is_SLOW_DO_RD state))
        ];

