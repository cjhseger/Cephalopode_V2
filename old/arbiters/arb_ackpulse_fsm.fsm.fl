// arb_ackpulse_fsm (autogenerated by Stately)

cload "ste.fl";

ENUM "arb_ackpulse_fsm_state"
    [ "START"
    , "SVC0"
    , "SVC1"
    , "WAIT0"
    , "WAIT1"
    ];

let arb_ackpulse_fsm =
    // clock
    bit_input clk.
    // inputs
    bit_input reset.
    bit_input ack.
    bit_input req0.
    bit_input req1.
    // outputs
    bit_output ack0.
    bit_output ack1.
    bit_output req.
    bit_output sel.
    // internals
    // state
    arb_ackpulse_fsm_state_internal state.
    CELL "draw_hier arb_ackpulse_fsm"
        [ Moore_FSM "arb_ackpulse_fsm_moore" clk state (reset, START)
              [ START --- (req0 '&' ack) --- START
              , START --- (req0 '&' ('~' ack)) --- WAIT0
              , START --- (('~' req0) '&' req1 '&' ack) --- START
              , START --- (('~' req0) '&' req1 '&' ('~' ack)) --- WAIT1
              , WAIT0 --- ack --- START
              , WAIT0 --- ('~' ack) --- WAIT0
              , WAIT1 --- ack --- START
              , WAIT1 --- ('~' ack) --- WAIT1
              ]
        , ack1 <- (((is_START state) '&' (('~' req0) '&' req1 '&' ack)) '|' ((is_WAIT1 state) '&' ack))
        , req <- (((is_START state) '&' (req0 '|' (('~' req0) '&' req1))) '|' (is_WAIT0 state) '|' (is_WAIT1 state))
        , sel <- (((is_START state) '&' (('~' req0) '&' req1)) '|' (is_WAIT1 state))
        , ack0 <- (((is_START state) '&' (req0 '&' ack)) '|' ((is_WAIT0 state) '&' ack))
        ];

