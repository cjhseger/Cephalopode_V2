
let display_ROM rom =
    let info = sscanf "%b" (hd rom) in
    let root_addr = (info / (2**(get_hw_type_size "addr")))-1 in
    let nodes = info % (2**(get_hw_type_size "addr")) in
    let tmp_dir = mktempd "rom_graph" then
    let dot_file = sprintf "%s/graph.dot" tmp_dir then
    let Ctp n = wexpr2bool [] (hw_destr n) in
    let Caddr n = wexpr2bool [] (hw_destr n) in
    let Cint n = wexpr2bool [] (hw_destr n) in
    let Caint n = wexpr2bool [] (hw_destr n) in
    let fp = fopen dot_file "w" then
    (fprintf fp "digraph G {\n") fseq
    (fprintf fp "node [shape=circle];\n") fseq
    (fprintf fp "center = 1;\n") fseq
    (fprintf fp "margin = 0.5;\n") fseq
    (fprintf fp "ordering=out;\n") fseq
    let rcnt = ref 0 then
    let addr_done = ref [] then
    letrec draw addr =
	(
	    let res = assoc addr (deref addr_done) then
	    res
	) catch
	(
	    let n = deref rcnt then
	    (rcnt := (n+1)) fseq
	    (addr_done := ((addr,n):(deref addr_done))) fseq
	    let {nd::node} = ''(sscanf "%b" (el (addr+2) rom)) in
	    let srow = "" in
	    let tp = Ctp (nd-->ntype) then
	    tp == (Ctp G_APP) =>
	    (
		let l = draw (bv2num (Caddr (nd-->left))) then
		let r = draw (bv2num (Caddr (nd-->right))) then
		(fprintf fp "n%d [label = \"%s@\"];\n" n srow) fseq
		(fprintf fp "n%d -> n%d [style=solid, color=red];\n" n l)
		fseq
		(fprintf fp "n%d -> n%d [style=solid, color=black];\n" n r)
		fseq
		(
		  (
		    let u = assoc addr (deref addr_done) then
		    (fprintf fp "n%d -> n%d [dir=back, style=dashed, color=blue];\n"
				u n)
		  ) catch ()
		)
		fseq
		n
	    )
	    |
	    tp == (Ctp G_COMB) =>
	    (
		let Cc n = wexpr2bool [] (hw_destr n) in
		let c = Cc (nd-->comb) then
		let tp =
		    c == (Cc C_S) => "S" |
		    c == (Cc C_K) => "K" |
		    c == (Cc C_I) => "I" |
		    c == (Cc C_LET) => "LET" |
		    c == (Cc C_Y) => "Y" |
		    c == (Cc C_SPRIME) => "S'" |
		    c == (Cc C_SPRIMEPRIME) => "S''" |
		    c == (Cc C_C) => "C" |
		    c == (Cc C_CPRIME) => "C'" |
		    c == (Cc C_B) => "B" |
		    c == (Cc C_BSTAR) => "B*" |
		    c == (Cc C_BPRIME) => "B'" |
		    c == (Cc C_S1) => "S1" |
		    c == (Cc C_S2) => "S2" |
		    c == (Cc C_L) =>
			let i = wexpr2bool [] (hw_destr (nd-->comb_idx)) in
			sprintf "L%d" (bv2int (list2bv i))
		    |
		    c == (Cc C_Cn) =>
			let i = wexpr2bool [] (hw_destr (nd-->comb_idx)) in
			sprintf "Cn%d" (bv2int (list2bv i))
		    |
		    sprintf "COMB_%s" (bv2str 10 (list2bv c))
		then
		(fprintf fp "n%d [label = \"%s%s\"];\n" n srow tp)
		fseq
		(
		  (
		    let u = assoc addr (deref addr_done) then
		    (fprintf fp "n%d -> n%d [dir=back, style=dashed, color=blue];\n"
				u n)
		  ) catch ()
		) fseq n
	    )
	    | tp == (Ctp G_PRIM) =>
	    (
		let Cp n = wexpr2bool [] (hw_destr n) in
		let p = Cp (nd-->prim) then
		let tp =
		    p = (Cp P_PLUS) => "+" |
		    p = (Cp P_MINUS) => "-" |
		    p = (Cp P_TIMES) => "*" |
		    p = (Cp P_DIV) => "/" |
		    p = (Cp P_MOD) => "%" |
		    p = (Cp P_EQ) => "==" |
		    p = (Cp P_NEQ) => "!=" |
		    p = (Cp P_GT) => ">" |
		    p = (Cp P_GEQ) => ">=" |
		    p = (Cp P_AND) => "&" |
		    p = (Cp P_OR) => "|" |
		    p = (Cp P_NOT) => "~" |
		    p = (Cp P_COND) => "ITE" |
		    p = (Cp P_FST) => "fst" |
		    p = (Cp P_SND) => "snd" |
		    p = (Cp P_TUPLE) => "TUPLE" |
		    p = (Cp P_HD) => "hd" |
		    p = (Cp P_TL) => "tl" |
		    p = (Cp P_IS_NIL) => "isNIL" |
		    p = (Cp P_CONS) => "CONS" |
		    p = (Cp P_NIL) => "NIL" |
		    sprintf "PRIM_%s" (bv2str 10 (list2bv p))
		then
		(fprintf fp "n%d [label = \"%s%s\"];\n" n srow tp)
		fseq
		(
		  (
		    let u = assoc addr (deref addr_done) then
		    (fprintf fp "n%d -> n%d [dir=back, style=dashed, color=blue];\n"
				u n)
		  ) catch ()
		)
		fseq n
	    )
	    | tp == (Ctp G_INDIR) =>
	    (
		let l = draw (bv2num (Caddr (nd-->left))) then
		(fprintf fp "n%d [label = \"%s->\"];\n" n srow) fseq
		(fprintf fp "n%d -> n%d [style=solid, color=red];\n" n l)
		fseq
		(
		  (
		    let u = assoc addr (deref addr_done) then
		    (fprintf fp "n%d -> n%d [dir=back, style=dashed, color=blue];\n"
				u n)
		  ) catch ()
		)
		fseq
		n
	    )
	    | tp == (Ctp G_CONS) =>
	    (
		let l = draw (bv2num (Caddr (nd-->left))) then
		let r = draw (bv2num (Caddr (nd-->right))) then
		(fprintf fp "n%d [label = \"%s:\"];\n" n srow) fseq
		(fprintf fp "n%d -> n%d [style=solid, color=red];\n" n l)
		fseq
		(fprintf fp "n%d -> n%d [style=solid, color=black];\n" n r)
		fseq
		n
	    )
	    | tp == (Ctp G_NIL) =>
	    (
		(fprintf fp "n%d [label = \"%sNIL\"];\n" n srow) fseq n
	    )
	    | tp == (Ctp G_INT) =>
	    (
		let i = bv2num (Cint (nd-->int)) then
		(fprintf fp "n%d [shape=box,label = \"%s%d\", color=blue];\n" n srow i)
		fseq
		(
		  (
		    let u = assoc addr (deref addr_done) then
		    (fprintf fp "n%d -> n%d [dir=back, style=dashed, color=blue];\n"
				u n)
		  ) catch ()
		)
		fseq
		n
	    )
	    | tp == (Ctp G_AINT) =>
	    (
		let i = bv2num (Caint (nd-->aint)) then
		(fprintf fp "n%d [shape=box,label = \"%s%d\", color=red];\n"
			    n srow i) fseq
		let next = bv2num (Caddr (nd-->left)) then
		next = 0 => n |
		let l = draw next then
		(fprintf fp "n%d -> n%d [style=solid, color=black];\n" n l)
		fseq
		(
		  (
		    let u = assoc addr (deref addr_done) then
		    (fprintf fp "n%d -> n%d [dir=back, style=dashed, color=blue];\n"
				u n)
		  ) catch ()
		)
		fseq
		n
	    )
	    |
		let bv = list2bv (wexpr2bool [] (hw_destr nd)) in
		let tp = sprintf "PRIM_%s" (bv2str 10 bv) in
		(fprintf fp "n%d [label = \"%s%s\"];\n" n srow tp) fseq n
	)
    in
    (((draw root_addr) fseq ()) gen_catch
    (\msg.
	(str_is_substr "Non binary value " msg =>
	    fprintf stderr "\n--I-- %s\n" (hd (str_split msg "\n"))
	|
	str_is_substr "Non binary live value " msg =>
	    fprintf stderr "\n--I-- %s\n" (hd (str_split msg "\n"))
	|
	    fprintf stderr "ERROR: %s\n" msg
	) fseq
	let msg = sprintf "Not a valid graph at address %d"
			  root_addr
	in
	fprintf fp "n [shape=box,label=\"%s\"];\n" msg
    )) fseq
    (fprintf fp "\n}\n") fseq
    (fclose fp) fseq
    let w = tcl_eval [sprintf "display_dot %s {} {}" dot_file] then
    (system (sprintf "/bin/rm -f %s" dot_file)) fseq
    ()
;

